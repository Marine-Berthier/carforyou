{"ast":null,"code":"var _jsxFileName = \"/var/www/html/Perso/carforyou/pages/makemodelselect.tsx\";\nvar __jsx = React.createElement;\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport axios from \"axios\";\n\nclass MakeModelSelect extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"useEffect\", () => {\n      // Call our API to collect brands at construction\n      axios.get(`https://catalogue-service.preprod.carforyou.ch:443/api/makes`).then(res => {\n        const make = res.data;\n        this.setState({\n          make\n        });\n      });\n    });\n\n    _defineProperty(this, \"makeSelected\", event => {\n      this.setState({\n        showTypes: false\n      });\n      this.setState({\n        brand: event.target.value\n      });\n      this.setState({\n        accessToModel: false\n      });\n      axios.get(`https://catalogue-service.preprod.carforyou.ch:443/api/makes/key/${event.target.value}/models`).then(res => {\n        const models = res.data;\n        this.setState({\n          models\n        });\n      });\n    });\n\n    _defineProperty(this, \"modelSelected\", event => {\n      this.setState({\n        showTypes: false\n      });\n      axios.get(`https://catalogue-service.preprod.carforyou.ch:443/api/types?makeKey=${this.state.brand}&modelKey=${event.target.value}`).then(res => {\n        const types = res.data.content;\n        this.setState({\n          types\n        });\n\n        if (this.state.types.length > 0) {\n          this.setState({\n            showTypes: true\n          });\n        }\n      });\n    });\n\n    this.state = {\n      make: [],\n      models: [],\n      types: [],\n      brand: \"\",\n      accessToModel: true,\n      showTypes: false\n    };\n  }\n\n  // Function to reset the type input, depending on the model we want to show or hide this input (because some models does not have a type list) => don't need it actually.\n  render() {\n    const {\n      make,\n      models,\n      types\n    } = this.state;\n    return __jsx(React.Fragment, null, __jsx(\"h1\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }, \"Make your selection\"), __jsx(\"div\", {\n      id: \"inputs-container\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }\n    }, __jsx(\"div\", {\n      className: \"input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"make\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 13\n      }\n    }, \"Choose a brand:\"), __jsx(\"select\", {\n      onChange: this.makeSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 13\n      }\n    }, __jsx(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 15\n      }\n    }, \"Brands' list\"), make.map((brand, i) => __jsx(\"option\", {\n      key: i,\n      value: brand.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }\n    }, brand.name)))), __jsx(\"div\", {\n      className: \"input\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 11\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"model\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 13\n      }\n    }, \"Choose a model:\"), __jsx(\"select\", {\n      disabled: this.state.accessToModel,\n      onChange: this.modelSelected,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 13\n      }\n    }, __jsx(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 15\n      }\n    }, \"Models' list\"), models.map((model, i) => __jsx(\"option\", {\n      key: i,\n      value: model.key,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }\n    }, model.name)))), __jsx(\"div\", {\n      className: \"input \" + (this.state.showTypes ? \"\" : \"hide\"),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }\n    }, __jsx(\"label\", {\n      htmlFor: \"type\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 13\n      }\n    }, \"Type list:\"), __jsx(\"select\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 13\n      }\n    }, __jsx(\"option\", {\n      value: \"\",\n      disabled: true,\n      selected: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 15\n      }\n    }, \"Types' list\"), types.map((type, i) => __jsx(\"option\", {\n      key: i,\n      value: type.id,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 17\n      }\n    }, type.fullName))))));\n  }\n\n}\n\nexport default MakeModelSelect;","map":{"version":3,"sources":["/var/www/html/Perso/carforyou/pages/makemodelselect.tsx"],"names":["React","axios","MakeModelSelect","Component","constructor","props","get","then","res","make","data","setState","event","showTypes","brand","target","value","accessToModel","models","state","types","content","length","render","makeSelected","map","i","key","name","modelSelected","model","type","id","fullName"],"mappings":"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","sourcesContent":["import React from \"react\"\nimport axios from \"axios\"\n\nclass MakeModelSelect extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      make: [],\n      models: [],\n      types: [],\n      brand: \"\",\n      accessToModel: true,\n      showTypes: false,\n    }\n\n    \n  }\n\n  useEffect = () => {\n    // Call our API to collect brands at construction\n\n    axios\n      .get(`https://catalogue-service.preprod.carforyou.ch:443/api/makes`)\n      .then((res) => {\n        const make = res.data\n        this.setState({ make })\n      })\n  }\n\n  // Function to collect models from the API once brand is chosen\n  // For each model selection you want first to hide the type selection / Also update 'Brand' in our state, as we will need this information for the next step / Finally turn access model to false in order to be able to access the model input.\n\n  makeSelected = (event) => {\n    this.setState({ showTypes: false })\n    this.setState({ brand: event.target.value })\n    this.setState({ accessToModel: false })\n    axios\n      .get(\n        `https://catalogue-service.preprod.carforyou.ch:443/api/makes/key/${event.target.value}/models`\n      )\n      .then((res) => {\n        const models = res.data\n        this.setState({ models })\n      })\n  }\n\n  // Function to collect types from the API once model is chosen // display Types input only if the array it not empty. \n\n  modelSelected = (event) => {\n    this.setState({ showTypes: false })\n    axios\n      .get(\n        `https://catalogue-service.preprod.carforyou.ch:443/api/types?makeKey=${this.state.brand}&modelKey=${event.target.value}`\n      )\n      .then((res) => {\n        const types = res.data.content\n        this.setState({ types })\n        if (this.state.types.length > 0) {\n          this.setState({ showTypes: true })\n        }\n      })\n  }\n\n  // Function to reset the type input, depending on the model we want to show or hide this input (because some models does not have a type list) => don't need it actually.\n\n  \n  \n\n  render() {\n    const { make, models, types } = this.state\n\n    return (\n      <>\n        <h1>Make your selection</h1>\n\n        <div id=\"inputs-container\">\n          <div className=\"input\">\n            <label htmlFor=\"make\">Choose a brand:</label>\n            <select onChange={this.makeSelected}>\n              <option value=\"\" disabled selected>\n                Brands' list\n              </option>\n              {make.map((brand, i) => (\n                <option key={i} value={brand.key}>\n                  {brand.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className=\"input\">\n            <label htmlFor=\"model\">Choose a model:</label>\n            <select\n              disabled={this.state.accessToModel}\n              onChange={this.modelSelected}\n            >\n              <option value=\"\" disabled selected>\n                Models' list\n              </option>\n              {models.map((model, i) => (\n                <option key={i} value={model.key}>\n                  {model.name}\n                </option>\n              ))}\n            </select>\n          </div>\n\n          <div className={\"input \" + (this.state.showTypes ? \"\" : \"hide\")}>\n            <label htmlFor=\"type\">Type list:</label>\n            <select>\n              <option value=\"\" disabled selected>\n                Types' list\n              </option>\n              {types.map((type, i) => (\n                <option key={i} value={type.id}>\n                  {type.fullName}\n                </option>\n              ))}\n            </select>\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default MakeModelSelect\n"]},"metadata":{},"sourceType":"module"}